const { supabaseAdmin } = require('../config/database');

// âœ… Format standard de rÃ©ponse pour Axios
const sendSuccessResponse = (res, message, data = null, statusCode = 200) => {
Â  const response = {
Â  Â  success: true,
Â  Â  message,
Â  Â  ...(data && { data })
Â  };
Â  return res.status(statusCode).json(response);
};

const sendErrorResponse = (res, message, statusCode = 500, error = null) => {
Â  console.error('Dish Controller Error:', message, error);
Â  const response = {
Â  Â  success: false,
Â  Â  message,
Â  Â  ...(error && process.env.NODE_ENV === 'development' && { error: error.message })
Â  };
Â  return res.status(statusCode).json(response);
};

// @desc Â  Â Obtenir tous les plats
// ... (Pas de changement ici, pas de req.params.id)
const getDishes = async (req, res) => {
Â  try {
Â  Â  const { restaurant_id, category, search, limit = 50, offset = 0 } = req.query;

Â  Â  let query = supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  restaurant:restaurants(name, commune, address, phone, delivery_fee, delivery_time)
Â  Â  Â  `)
Â  Â  Â  .eq('is_available', true);

Â  Â  // Filtres (Si restaurant_id est dans req.query, il n'est pas nÃ©cessaire de le parser car il est string, mais si la BDD l'exige, il faudrait le faire ici aussi)
Â  Â  if (restaurant_id) {
Â  Â  Â  // ðŸ’¡ Correction optionnelle si restaurant_id est envoyÃ© via query et doit Ãªtre un nombre:
Â  Â  Â  const numericRestaurantId = parseInt(restaurant_id, 10);
Â  Â  Â  if (!isNaN(numericRestaurantId)) {
Â  Â  Â  Â  query = query.eq('restaurant_id', numericRestaurantId);
Â  Â  Â  }
Â  Â  }

Â  Â  if (category && category !== 'Tous') {
Â  Â  Â  query = query.eq('category', category);
Â  Â  }

Â  Â  if (search) {
Â  Â  Â  query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%,ingredients.ilike.%${search}%`);
Â  Â  }

Â  Â  const { data: dishes, error, count } = await query
Â  Â  Â  .order('created_at', { ascending: false })
Â  Â  Â  .range(parseInt(offset), parseInt(offset) + parseInt(limit) - 1);

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(
Â  Â  Â  res,
Â  Â  Â  'Plats rÃ©cupÃ©rÃ©s avec succÃ¨s',
Â  Â  Â  {
Â  Â  Â  Â  dishes,
Â  Â  Â  Â  pagination: {
Â  Â  Â  Â  Â  total: count,
Â  Â  Â  Â  Â  limit: parseInt(limit),
Â  Â  Â  Â  Â  offset: parseInt(offset)
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  );

Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration des plats', 500, error);
Â  }
};

// @desc Â  Â Obtenir les plats d'un restaurant
// @route Â  GET /api/dishes/restaurant/:restaurantId
// @access Â Public
const getDishesByRestaurant = async (req, res) => {
Â  try {
Â  Â  const { restaurantId } = req.params; // ChaÃ®ne reÃ§ue de l'URL

Â  Â  // ðŸ”‘ CORRECTION NÂ°1 : Conversion de req.params.restaurantId
Â  Â  const numericRestaurantId = parseInt(restaurantId, 10);
Â  Â  if (isNaN(numericRestaurantId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID du restaurant invalide', 400);
Â  Â  }

Â  Â  const { category, available = true } = req.query;

Â  Â  let query = supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .select('*')
Â  Â  Â  .eq('restaurant_id', numericRestaurantId); // Utilisation de l'ID numÃ©rique

Â  Â  if (available) {
Â  Â  Â  query = query.eq('is_available', true);
Â  Â  }

Â  Â  if (category && category !== 'Tous') {
Â  Â  Â  query = query.eq('category', category);
Â  Â  }

Â  Â  const { data: dishes, error } = await query
Â  Â  Â  .order('created_at', { ascending: false });

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(
Â  Â  Â  res,
Â  Â  Â  `Plats du restaurant rÃ©cupÃ©rÃ©s avec succÃ¨s`,
Â  Â  Â  { dishes }
Â  Â  );

Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration des plats du restaurant', 500, error);
Â  }
};

// @desc Â  Â Rechercher des plats
// ... (Pas de changement ici, pas de req.params.id)
const searchDishes = async (req, res) => {
Â  // ... (Code conservÃ©)
};

// @desc Â  Â Obtenir un plat par ID
// @route Â  GET /api/dishes/:id
// @access Â Public
const getDishById = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;

Â  Â  // ðŸ”‘ CORRECTION NÂ°2 : Conversion de req.params.id
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de plat invalide', 400);
Â  Â  }

Â  Â  const { data: dish, error } = await supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  restaurant:restaurants(
Â  Â  Â  Â  Â  id,
Â  Â  Â  Â  Â  name, 
Â  Â  Â  Â  Â  commune, 
Â  Â  Â  Â  Â  phone, 
Â  Â  Â  Â  Â  address,
Â  Â  Â  Â  Â  delivery_fee,
Â  Â  Â  Â  Â  delivery_time,
Â  Â  Â  Â  Â  category
Â  Â  Â  Â  )
Â  Â  Â  `)
Â  Â  Â  .eq('id', numericId) // Utilisation de l'ID numÃ©rique
Â  Â  Â  .single();

Â  Â  if (error || !dish) {
Â  Â  Â  return sendErrorResponse(res, 'Plat non trouvÃ©', 404);
Â  Â  }

Â  Â  return sendSuccessResponse(
Â  Â  Â  res,
Â  Â  Â  'Plat rÃ©cupÃ©rÃ© avec succÃ¨s',
Â  Â  Â  { dish }
Â  Â  );

Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration du plat', 500, error);
Â  }
};

// @desc Â  Â CrÃ©er un plat
// ... (Pas de changement ici, pas de req.params.id)
const createDish = async (req, res) => {
Â  // ... (Code conservÃ©)
};

// @desc Â  Â Mettre Ã  jour un plat
// @route Â  PUT /api/dishes/:id
// @access Â Private (Restaurant owner)
const updateDish = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;

Â  Â  // ðŸ”‘ CORRECTION NÂ°3 : Conversion de req.params.id
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de plat invalide', 400);
Â  Â  }

Â  Â  // VÃ©rifier que l'utilisateur est propriÃ©taire du plat
Â  Â  const { data: dish, error: dishError } = await supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  restaurant:restaurants(user_id)
Â  Â  Â  `)
Â  Â  Â  .eq('id', numericId) // Utilisation de l'ID numÃ©rique
Â  Â  Â  .single();

Â  Â  if (dishError || !dish) {
Â  Â  Â  return sendErrorResponse(res, 'Plat non trouvÃ©', 404);
Â  Â  }

Â  Â  if (dish.restaurant.user_id !== req.user.id) {
Â  Â  Â  return sendErrorResponse(res, 'AccÃ¨s refusÃ© - Vous n\'Ãªtes pas propriÃ©taire de ce plat', 403);
Â  Â  }

Â  Â  const { data: updatedDish, error } = await supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .update(req.body)
Â  Â  Â  .eq('id', numericId) // Utilisation de l'ID numÃ©rique
Â  Â  Â  .select('*')
Â  Â  Â  .single();

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(
Â  Â  Â  res,
Â  Â  Â  'Plat mis Ã  jour avec succÃ¨s',
Â  Â  Â  { dish: updatedDish }
Â  Â  );

Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la mise Ã  jour du plat', 500, error);
Â  }
};

// @desc Â  Â Supprimer un plat
// @route Â  DELETE /api/dishes/:id
// @access Â Private (Restaurant owner)
const deleteDish = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;

Â  Â  // ðŸ”‘ CORRECTION NÂ°4 : Conversion de req.params.id
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de plat invalide', 400);
Â  Â  }

Â  Â  // VÃ©rifier que l'utilisateur est propriÃ©taire du plat
Â  Â  const { data: dish, error: dishError } = await supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  restaurant:restaurants(user_id)
Â  Â  Â  `)
Â  Â  Â  .eq('id', numericId) // Utilisation de l'ID numÃ©rique
Â  Â  Â  .single();

Â  Â  if (dishError || !dish) {
Â  Â  Â  return sendErrorResponse(res, 'Plat non trouvÃ©', 404);
Â  Â  }

Â  Â  if (dish.restaurant.user_id !== req.user.id) {
Â  Â  Â  return sendErrorResponse(res, 'AccÃ¨s refusÃ© - Vous n\'Ãªtes pas propriÃ©taire de ce plat', 403);
Â  Â  }

Â  Â  const { error } = await supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .delete()
Â  Â  Â  .eq('id', numericId); // Utilisation de l'ID numÃ©rique

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(
Â  Â  Â  res,
Â  Â  Â  'Plat supprimÃ© avec succÃ¨s'
Â  Â  );

Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la suppression du plat', 500, error);
Â  }
};

// @desc Â  Â Obtenir les catÃ©gories de plats
// ... (Pas de changement ici, pas de req.params.id)
const getDishCategories = async (req, res) => {
Â  // ... (Code conservÃ©)
};

module.exports = {
Â  getDishes,
Â  getDishesByRestaurant,
Â  getDishById,
Â  createDish,
Â  updateDish,
Â  deleteDish,
Â  searchDishes,
Â  getDishCategories
};