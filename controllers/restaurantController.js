const { supabaseAdmin } = require('../config/database');

// --- Fonctions utilitaires (conservÃ©es) ---

const sendSuccessResponse = (res, message, data = null, statusCode = 200) => {
Â  const response = {
Â  Â  success: true,
Â  Â  message,
Â  Â  ...(data && { data })
Â  };
Â  return res.status(statusCode).json(response);
};

const sendErrorResponse = (res, message, statusCode = 500, error = null) => {
Â  console.error('Restaurant Controller Error:', message, error);
Â  const response = {
Â  Â  success: false,
Â  Â  message,
Â  Â  ...(error && process.env.NODE_ENV === 'development' && { error: error.message })
Â  };
Â  return res.status(statusCode).json(response);
};

// --- Fonctions de contrÃ´leur corrigÃ©es ---

// @desc Â  Â Obtenir tous les restaurants
// ... (Pas de changement ici, pas de req.params.id)
const getRestaurants = async (req, res) => {
Â  try {
Â  Â  const { commune, category, search } = req.query;
Â  Â  
Â  Â  let query = supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  dishes:dishes(count)
Â  Â  Â  `)
Â  Â  Â  .eq('status', 'active');

Â  Â  // Filtres (commune, category, search) ...

Â  Â  if (commune && commune !== 'Tous') {
Â  Â  Â  query = query.eq('commune', commune);
Â  Â  }

Â  Â  if (category && category !== 'Tous') {
Â  Â  Â  query = query.eq('category', category);
Â  Â  }

Â  Â  if (search) {
Â  Â  Â  query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);
Â  Â  }

Â  Â  const { data: restaurants, error } = await query.order('created_at', { ascending: false });

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

    // Utilisation de la fonction de rÃ©ponse standard
    return sendSuccessResponse(res, 'Restaurants rÃ©cupÃ©rÃ©s avec succÃ¨s', { restaurants }, 200);

Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration des restaurants', 500, error);
Â  }
};

// @desc Â  Â Obtenir un restaurant par ID
// @route Â  GET /api/restaurants/:id
// @access Â Public
const getRestaurantById = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;

Â  Â  // ðŸ”‘ CORRECTION NÂ°1 : Convertir l'ID (chaÃ®ne) en nombre (Integer)
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de restaurant invalide', 400);
Â  Â  }

Â  Â  const { data: restaurant, error } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  dishes:dishes(*),
Â  Â  Â  Â  user:users(name, phone)
Â  Â  Â  `)
Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  .single();

Â  Â  if (error || !restaurant) {
Â  Â  Â  return sendErrorResponse(res, 'Restaurant non trouvÃ©', 404);
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Restaurant rÃ©cupÃ©rÃ© avec succÃ¨s', { restaurant });
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration du restaurant', 500, error);
Â  }
};

// @desc Â  Â CrÃ©er un restaurant
// ... (Pas de changement ici, pas de req.params.id)
const createRestaurant = async (req, res) => {
Â  try {
Â  Â  // ... (Logique de crÃ©ation)
Â  Â  const restaurantData = {
Â  Â  Â  ...req.body,
Â  Â  Â  user_id: req.user.id
Â  Â  };

Â  Â  const { data: restaurant, error } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .insert([restaurantData])
Â  Â  Â  .select()
Â  Â  Â  .single();

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Restaurant crÃ©Ã© avec succÃ¨s', { restaurant }, 201);
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la crÃ©ation du restaurant', 500, error);
Â  }
};

// @desc Â  Â Mettre Ã  jour un restaurant
// @route Â  PUT /api/restaurants/:id
// @access Â Private (Restaurant owner)
const updateRestaurant = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;

Â  Â  // ðŸ”‘ CORRECTION NÂ°2 : Convertir l'ID (chaÃ®ne) en nombre
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de restaurant invalide', 400);
Â  Â  }

Â  Â  // VÃ©rifier que l'utilisateur est propriÃ©taire du restaurant
Â  Â  const { data: restaurant } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .select('user_id')
Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  .single();

Â  Â  if (!restaurant || restaurant.user_id !== req.user.id) {
Â  Â  Â  return sendErrorResponse(res, 'AccÃ¨s refusÃ©', 403);
Â  Â  }

Â  Â  const { data: updatedRestaurant, error } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .update(req.body)
Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  .select()
Â  Â  Â  .single();

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Restaurant mis Ã  jour avec succÃ¨s', { restaurant: updatedRestaurant });
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la mise Ã  jour du restaurant', 500, error);
Â  }
};

// @desc Â  Â Supprimer un restaurant
// @route Â  DELETE /api/restaurants/:id
// @access Â Private (Restaurant owner or Admin)
const deleteRestaurant = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  
Â  Â  // ðŸ”‘ CORRECTION NÂ°3 : Convertir l'ID (chaÃ®ne) en nombre
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de restaurant invalide', 400);
Â  Â  }

Â  Â  // VÃ©rifier les permissions
Â  Â  if (req.user.role !== 'admin') {
Â  Â  Â  const { data: restaurant } = await supabaseAdmin
Â  Â  Â  Â  .from('restaurants')
Â  Â  Â  Â  .select('user_id')
Â  Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  Â  .single();

Â  Â  Â  if (!restaurant || restaurant.user_id !== req.user.id) {
Â  Â  Â  Â  return sendErrorResponse(res, 'AccÃ¨s refusÃ©', 403);
Â  Â  Â  }
Â  Â  }

Â  Â  const { error } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .delete()
Â  Â  Â  .eq('id', numericId); // Utilisation de numericId

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Restaurant supprimÃ© avec succÃ¨s');
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la suppression du restaurant', 500, error);
Â  }
};

// @desc Â  Â Obtenir les plats d'un restaurant
// @route Â  GET /api/restaurants/:id/dishes
// @access Â Public
const getRestaurantDishes = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const { category, search } = req.query;

Â  Â  // ðŸ”‘ CORRECTION NÂ°4 : Convertir l'ID (chaÃ®ne) en nombre
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de restaurant invalide', 400);
Â  Â  }

Â  Â  let query = supabaseAdmin
Â  Â  Â  .from('dishes')
Â  Â  Â  .select('*')
Â  Â  Â  .eq('restaurant_id', numericId) // Utilisation de numericId
Â  Â  Â  .eq('is_available', true);

Â  Â  if (category && category !== 'Tous') {
Â  Â  Â  query = query.eq('category', category);
Â  Â  }

Â  Â  if (search) {
Â  Â  Â  query = query.or(`name.ilike.%${search}%,description.ilike.%${search}%`);
Â  Â  }

Â  Â  const { data: dishes, error } = await query.order('created_at', { ascending: false });

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Plats rÃ©cupÃ©rÃ©s avec succÃ¨s', { count: dishes.length, dishes });
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration des plats', 500, error);
Â  }
};

// @desc Â  Â Obtenir les commandes d'un restaurant
// @route Â  GET /api/restaurants/:id/orders
// @access Â Private (Restaurant owner)
const getRestaurantOrders = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const { status } = req.query;

Â  Â  // ðŸ”‘ CORRECTION NÂ°5 : Convertir l'ID (chaÃ®ne) en nombre
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de restaurant invalide', 400);
Â  Â  }

Â  Â  // VÃ©rifier que l'utilisateur est propriÃ©taire du restaurant
Â  Â  const { data: restaurant } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .select('user_id')
Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  .single();

Â  Â  if (!restaurant || restaurant.user_id !== req.user.id) {
Â  Â  Â  return sendErrorResponse(res, 'AccÃ¨s refusÃ©', 403);
Â  Â  }

Â  Â  let query = supabaseAdmin
Â  Â  Â  .from('orders')
Â  Â  Â  .select(`
Â  Â  Â  Â  *,
Â  Â  Â  Â  order_items:order_items(*),
Â  Â  Â  Â  user:users(name, phone)
Â  Â  Â  `)
Â  Â  Â  .eq('restaurant_id', numericId); // Utilisation de numericId

Â  Â  if (status) {
Â  Â  Â  query = query.eq('status', status);
Â  Â  }

Â  Â  const { data: orders, error } = await query.order('created_at', { ascending: false });

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Commandes rÃ©cupÃ©rÃ©es avec succÃ¨s', { count: orders.length, orders });
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la rÃ©cupÃ©ration des commandes', 500, error);
Â  }
};

// @desc Â  Â Mettre Ã  jour le statut d'un restaurant
// @route Â  PATCH /api/restaurants/:id/status
// @access Â Private (Restaurant owner)
const updateRestaurantStatus = async (req, res) => {
Â  try {
Â  Â  const { id } = req.params;
Â  Â  const { status } = req.body;

Â  Â  // ðŸ”‘ CORRECTION NÂ°6 : Convertir l'ID (chaÃ®ne) en nombre
Â  Â  const numericId = parseInt(id, 10);
Â  Â  if (isNaN(numericId)) {
Â  Â  Â  return sendErrorResponse(res, 'ID de restaurant invalide', 400);
Â  Â  }

Â  Â  // VÃ©rifier que l'utilisateur est propriÃ©taire du restaurant
Â  Â  const { data: restaurant } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .select('user_id')
Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  .single();

Â  Â  if (!restaurant || restaurant.user_id !== req.user.id) {
Â  Â  Â  return sendErrorResponse(res, 'AccÃ¨s refusÃ©', 403);
Â  Â  }

Â  Â  const { data: updatedRestaurant, error } = await supabaseAdmin
Â  Â  Â  .from('restaurants')
Â  Â  Â  .update({ status })
Â  Â  Â  .eq('id', numericId) // Utilisation de numericId
Â  Â  Â  .select()
Â  Â  Â  .single();

Â  Â  if (error) {
Â  Â  Â  throw error;
Â  Â  }

Â  Â  return sendSuccessResponse(res, 'Statut du restaurant mis Ã  jour', { restaurant: updatedRestaurant });
Â  } catch (error) {
Â  Â  return sendErrorResponse(res, 'Erreur lors de la mise Ã  jour du statut', 500, error);
Â  }
};

module.exports = {
Â  getRestaurants,
Â  getRestaurantById,
Â  createRestaurant,
Â  updateRestaurant,
Â  deleteRestaurant,
Â  getRestaurantDishes,
Â  getRestaurantOrders,
Â  updateRestaurantStatus
};