// dishRoutes.js - AVEC MOCKING POUR LA DÃ‰MO
const express = require('express');

// Importez les contrÃ´leurs originaux pour les autres routes
const {
Â  getDishes,
Â  getDishById,
Â  createDish,
Â  updateDish,
Â  deleteDish,
Â  searchDishes,
Â  // getDishesByRestaurant <-- ContrÃ´leur original non utilisÃ© ici
} = require('../controllers/dishController');

// âœ… Importez le mock controller
const { getMockDishesByRestaurant } = require('../controllers/mockControllers'); 

const { protect, authorize } = require('../middleware/authMiddleware');
const { validate, schemas } = require('../middleware/validationMiddleware');

const router = express.Router();

// --- ROUTES PUBLIQUES (Ordre corrigÃ© et MockÃ©) ---
router.get('/', getDishes);
router.get('/search', searchDishes);

// ðŸ›‘ ATTENTION : L'ordre est CRITIQUE. /restaurant/:id DOIT VENIR AVANT /:id
router.get('/restaurant/:id', getMockDishesByRestaurant); // âœ… UTILISE LE MOCK
router.get('/:id', getDishById); // 3. Dynamique (doit venir aprÃ¨s)

// --- ROUTES PROTÃ‰GÃ‰ES ---
router.post('/', protect, authorize('restaurant'), validate(schemas.dish), createDish);
router.put('/:id', protect, authorize('restaurant'), updateDish);
router.delete('/:id', protect, authorize('restaurant'), deleteDish);

module.exports = router;